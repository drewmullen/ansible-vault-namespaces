---

# in order to build child namespaces you need to indicate the the parent. these facts maintain the current
# parent and the current child (looping through the namespaces_config_template.yml)
- set_fact:
    ns_parent: "{% if ns_name.split('/') | count > 1 %}{{ ns_name.split('/')[:-1] | join('/') }}{% else %}{% endif %}"
    ns_child: "{{ ns_name.split('/')[-1:] | join('') }}"

- name: "create namespace {{ ns_child }} in {{ ns_parent }}"
  import_tasks: namespace_create.yml
  when: ns_child != "root" # skip if root namespace, already exists

- name: enable auth mounts
  include_tasks: auth.yml
  loop: "{{ auths }}"
  loop_control:
    loop_var: auth
  when: auths |bool

- name: write policies
  include_tasks: policy_write.yml
  loop: "{{ policies.split(',') }}"
  loop_control:
    loop_var: policy

- name: enable secret engines
  include_tasks: engine.yml
  loop: "{{ engines }}"
  loop_control:
    loop_var: engine
  when: engines |bool # skip if no engines are defined

# - name: configure ldap
#   import_tasks: ldap_enable.yml
#   when: ldap

# - name: write auth roles
#   include_tasks: auth_role_write.yml
#   loop: "{{ auths }}"
#   loop_control:
#     loop_var: auth
#   when: auths

# - name: assoc policies
#   include_tasks: policy_associate.yml
#   loop: "{{ associations }}"
#   loop_control:
#     loop_var: policy